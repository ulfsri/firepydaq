{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(FormulaeExample)=\n",
    "# Example: Formulae file\n",
    "\n",
    "An example a formulae file lives at `tests/Example_Config_Formulae/Processing_formulae.csv`.\n",
    "\n",
    "Here, this file will be read and the columns their expected values and use will be discussed. This is done using only the first row,\n",
    "which takes the mean of the three thermocouples, having labels `DuctTC1`, `DuctTC2`, `DuctTC3`. These three thermocouples are the data obtained during acquisition, and correspond to the config file `Label`. Check out [config file example](NIConfigExample)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "┌───────────┬─────────────────┬──────────────┬────────────────┬────────┬──────────┬────────────────┐\n",
      "│ Label     ┆ RHS             ┆ Chart        ┆ Legend         ┆ Layout ┆ Position ┆ Processed_Unit │\n",
      "│ ---       ┆ ---             ┆ ---          ┆ ---            ┆ ---    ┆ ---      ┆ ---            │\n",
      "│ str       ┆ str             ┆ str          ┆ str            ┆ i64    ┆ i64      ┆ str            │\n",
      "╞═══════════╪═════════════════╪══════════════╪════════════════╪════════╪══════════╪════════════════╡\n",
      "│ Tmean     ┆ (DuctTC1 +      ┆  DuctTC      ┆  Mean gas temp ┆ 2      ┆ 2        ┆ K              │\n",
      "│           ┆ DuctTC2 +       ┆              ┆                ┆        ┆          ┆                │\n",
      "│           ┆ DuctTC3)/3      ┆              ┆                ┆        ┆          ┆                │\n",
      "│           ┆ +273.15         ┆              ┆                ┆        ┆          ┆                │\n",
      "├╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤\n",
      "│ KRosemont ┆ 0.6033          ┆  Constant    ┆ Avg pitot tube ┆ 0      ┆ 0        ┆ -              │\n",
      "│           ┆                 ┆              ┆ coefficient    ┆        ┆          ┆                │\n",
      "├╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤\n",
      "│ KDwyer    ┆ 0.81            ┆  Constant    ┆ Dwyer flow     ┆ 0      ┆ 0        ┆ -              │\n",
      "│           ┆                 ┆              ┆ coefficient    ┆        ┆          ┆                │\n",
      "├╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤\n",
      "│ rho_e     ┆ 101325*0.02896/ ┆ Intermediate ┆ Air density    ┆ 0      ┆ 0        ┆ kg/m^3         │\n",
      "│           ┆ (8.314*Tmean)   ┆              ┆ based on ideal ┆        ┆          ┆                │\n",
      "│           ┆                 ┆              ┆ gas law        ┆        ┆          ┆                │\n",
      "├╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤\n",
      "│ ID        ┆ 17.8*0.0254     ┆ Intermediate ┆ Internal       ┆ 0      ┆ 0        ┆ m              │\n",
      "│           ┆                 ┆              ┆ diameter of    ┆        ┆          ┆                │\n",
      "│           ┆                 ┆              ┆ the duct in    ┆        ┆          ┆                │\n",
      "│           ┆                 ┆              ┆ inches         ┆        ┆          ┆                │\n",
      "│           ┆                 ┆              ┆ multiplied by  ┆        ┆          ┆                │\n",
      "│           ┆                 ┆              ┆ m/inch factor  ┆        ┆          ┆                │\n",
      "└───────────┴─────────────────┴──────────────┴────────────────┴────────┴──────────┴────────────────┘\n"
     ]
    }
   ],
   "source": [
    "import polars as pl\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "formulae_file_path = \"../tests/Example_Config_Formulae/Processing_formulae.csv\"\n",
    "formulae_df = pl.read_csv(formulae_file_path)\n",
    "formulae_df.columns = [i.strip() for i in formulae_df.columns]\n",
    "\n",
    "with pl.Config() as cfg:\n",
    "    cfg.set_tbl_cols(formulae_df.shape[1])\n",
    "    cfg.set_tbl_rows(formulae_df.shape[0])\n",
    "    cfg.set_fmt_str_lengths(100)\n",
    "    cfg.set_float_precision(3)\n",
    "    cfg.set_tbl_formatting(\"UTF8_FULL\")\n",
    "    # cfg.set_tbl_hide_column_data_types(True)\n",
    "    cfg.set_tbl_hide_dataframe_shape(True)\n",
    "    pl_cfg_json = cfg.save()\n",
    "    print(formulae_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Formulae file columns\n",
    "1. `Label` : str\n",
    "    - A unique label for each row.\n",
    "    - This label indicates the left-hand-side of the equation to be processed.\n",
    "    - A variable by this name will be created during post-processing.\n",
    "3. `RHS` : str\n",
    "    - The right-hand-side part of the equation.\n",
    "    - Must be a string that can be executed in python. **For example, `DuctTC1**2` is `DuctTC1` raise to the exponent `2`. If you use `sqrt(DuctTC1)` will replace `sqrt` to `np.sqrt` to get the square root of `DuctTC1`. This is done in accordance to a dictionary that maps custom variable to numpy mathematical functions. See note below.**\n",
    "    - Equation of the form `Label = RHS` is executed during post-processing.\n",
    "    - See built-in python [exec](https://docs.python.org/3/library/functions.html#exec) function for additional details.\n",
    "    - **Note: Can contain formulae that use numpy mathemetical functions on 1D array. A `Formulae_dict` (a dictionary) in {doc}`DAQUtils documentation<autoapi/firepydaq/utilities/DAQUtils/index>` indicates the currently acceptable variables that maps to a numpy function. You can add your custom `variable: function` map to this dictionary following the example given in the DAQUtils documentation.**\n",
    "5. `Chart`: str\n",
    "    - String indicating the chart where this channel's post processed data will be displayed.\n",
    "    - This can be `None`, `Intermediate`, or `Constant` is you do not want to see this channel in the dashboard plots.\n",
    "    - It is recommended to use `Constant` in the `Chart` column for row which is a constant used in post-processing. (Example: `KRosemont` and `KWeyer` labels in the above example formulae file.) \n",
    "    - It is recommended to use `Constant` in the `Chart` column for row which is a constant used in post-processing. (Example: `rho_e` and `ID` labels in the above example.\n",
    "8. `Layout`: str/num\n",
    "    - Same columns as that used in the config file\n",
    "    - Must be in the form that can be converted into a natural number (1, 2, 3)\n",
    "    - The type of layout corresponding to the `Chart` parameter.\n",
    "    - All channels which are have the same `Chart` parameter must have the same `Layout` value.\n",
    "    - This will generate a figure in the dashboard that will have \\#`Layout` rows in vertical direction.\n",
    "    - It is recommended to keep this value to a maximum of 3 for better visualization in the dashboard.\n",
    "9. `Position`: str/num\n",
    "    - Same columns as that used in the config file\n",
    "    - Must be in the form that can be converted into a natural number (1, 2, 3)\n",
    "    - Indicates the position in the `Chart` where this channel data will be displayed.\n",
    "    - This value **must** be less than or equal to the `Layout` number.\n",
    "10. `Processed_Unit`: str\n",
    "    - Same columns as that used in the config file\n",
    "    - The unit of the channel data once it is scaled according to AI and Scale minimum and maximum values.\n",
    "    - This will be the y-axis label for the row.\n",
    "11. `Legend`: str\n",
    "    - Same columns as that used in the config file\n",
    "    - Legend for the channel.\n",
    "    - This will be displayed on the outside right of the plot in the dashboard.\n",
    "    \n",
    "**Please visit [Post processing example](PPExample) to see how the `Tmean` and other labels are processed.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
